# FROM node:20.12-alpine3.18 as build

# WORKDIR /app

# COPY package.json package-lock.json ./

# RUN npm install

# COPY . .

# RUN npx ng build --configuration production

# FROM nginx:1.25.3-alpine

# ARG VERSION_NUMBER_ARG=no-version
# ENV TZ=Europe/Zurich
# ENV VERSION_NUMBER=$VERSION_NUMBER_ARG

# COPY nginx/nginx.conf /etc/nginx/nginx.conf

# RUN touch /var/run/nginx.pid && \
#   mkdir -p /var/cache/nginx && \
#   chown -R nginx:nginx /var/run/nginx.pid && \
#   chown -R nginx:nginx /var/log/nginx && \
#   chown -R nginx:nginx /etc/nginx/nginx.conf && \
#   chown -R nginx:nginx /var/cache/nginx

# USER nginx

# COPY --from=build /app/dist/ucomand/browser/* /usr/share/nginx/html/
# COPY --from=build /app/src/assets /usr/share/nginx/html/assets

# EXPOSE 8081

# CMD ["nginx", "-g", "daemon off;"]





# Используем Node.js в качестве базового образа
FROM node:20.12-alpine3.18

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы package.json и package-lock.json в рабочую директорию
COPY package.json package-lock.json ./

# Устанавливаем зависимости
RUN npm install

# Устанавливаем Angular CLI глобально
RUN npm install -g @angular/cli

# Копируем остальные файлы проекта в контейнер
COPY . .

# Устанавливаем переменные окружения
ARG VERSION_NUMBER_ARG=no-version
ENV VERSION_NUMBER=$VERSION_NUMBER_ARG
ENV TZ=Europe/Zurich

# Открываем порт 80 для доступа к приложению
EXPOSE 80

# Команда для запуска Angular приложения с использованием ng serve
CMD ["ng", "serve", "--host", "0.0.0.0", "--port", "80"]
